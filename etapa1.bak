#lang racket
(require "suffix-tree.rkt")
(require (lib "trace.ss"))

(provide (all-defined-out))

; TODO 2
; Implementați o funcție care primește două cuvinte (liste
; de caractere) w1 și w2 și calculează cel mai lung prefix
; comun al acestora, împreună cu restul celor două cuvinte
; după eliminarea prefixului comun.
; ex:
; (longest-common-prefix '(#\w #\h #\y) '(#\w #\h #\e #\n))
; => '((#\w #\h) (#\y) (#\e #\n))
; Folosiți recursivitate pe coadă.
(define (longest-common-prefix w1 w2)
  (longest-common-prefix-tail w1 w2 `()))

(define (longest-common-prefix-tail w1 w2 acc)
  (cond
    [(and (null? w1) (null? w2)) (list acc `() `())]
    [(null? w1) (list acc `() w2)]
    [(null? w2) (list acc w1 `())]
    [(equal? (car w1) (car w2)) (longest-common-prefix-tail (cdr w1) (cdr w2) (append acc (cons (car w1) `())))]
    [else (list acc w1 w2)]))


; TODO 3
; Implementați recursiv o funcție care primește o listă nevidă 
; de cuvinte care încep cu același caracter și calculează cel 
; mai lung prefix comun al acestora.
; Opriți căutarea (parcurgerea) în momentul în care aveți garanția 
; că prefixul comun curent este prefixul comun final.
(define (longest-common-prefix-of-list words)
  (if (null? (cdr words))
      words
      (longest-common-prefix-of-list (append 

; order 0 - verifica prima litera pe rand din prima lista si adauga cuvantul fara aceasta in a doua lista
; order 1 - verifica din a doua lista si adauga in prima
; order 2 - verifica din prima lista dar un cuvant a ramas fara litere => verifica restul de cuvinte si se opreste
; order 3 - verifica a doua lista dar un cuvant a ramas fara litere

(define (longest-common-prefix-of-list-tail words aux-words check order acc)
  (cond
    [(equal? order `(0))
         (if (null? words)
             (if (null? (cdr (car aux-words)))
                 (longest-common-prefix-of-list-tail `() (cdr aux-words) (car (car aux-words)) `(3) (append acc (cons check `())))
                 (longest-common-prefix-of-list-tail (list (cdr (car aux-words))) (cdr aux-words) (car (car aux-words)) `(1) (append acc (cons check `()))))
             (if (equal? (car (car words)) check)
                 (if (null? (cdr (car words)))
                     (longest-common-prefix-of-list-tail (cdr words) aux-words check `(3) acc)
                     (longest-common-prefix-of-list-tail (cdr words) (append aux-words (list (cdr (car words)))) check order acc))
                 acc))]
    [(equal? order `(1))
         (if (null? aux-words)
             (if (null? (cdr (car words)))
                 (longest-common-prefix-of-list-tail (cdr words) `() (car (car words)) `(2) (append acc (cons check `())))
                 (longest-common-prefix-of-list-tail (cdr words) (list (cdr (car words))) (car (car words)) `(0) (append acc (cons check `()))))
             (if (equal? (car (car aux-words)) check)
                 (if (null? (cdr (car aux-words)))
                     (longest-common-prefix-of-list-tail words (cdr aux-words) check `(2) acc)
                     (longest-common-prefix-of-list-tail (append words (list (cdr (car aux-words)))) (cdr aux-words) check order acc))
                 acc))]
    [(equal? order `(2))
           (if (null? aux-words)
               (append acc (cons check `()))
               (if (equal? (car (car aux-words)) check)
                   (longest-common-prefix-of-list-tail `() (cdr aux-words) check order acc)
                   acc))]
    [(equal? order `(3))
           (if (null? words)
               (append acc (cons check `()))
               (if (equal? (car (car words)) check)
                   (longest-common-prefix-of-list-tail (cdr words) `() check order acc)
                   acc))]
    ))

;(trace longest-common-prefix-of-list-tail)

;; Următoarele două funcții sunt utile căutării unui șablon
;; (pattern) într-un text cu ajutorul arborelui de sufixe.
;; Ideea de căutare este următoarea:
;; - dacă șablonul există în text, atunci există un sufix care
;;   începe cu acest șablon, deci există o cale care începe din
;;   rădăcina arborelui care se potrivește cu șablonul
;; - vom căuta ramura a cărei etichetă începe cu prima literă
;;   din șablon
;; - dacă nu găsim această ramură, șablonul nu apare în text
;; - dacă șablonul este conținut integral în eticheta ramurii,
;;   atunci el apare în text
;; - dacă șablonul se potrivește cu eticheta dar nu este conținut
;;   în ea (de exemplu șablonul "nana$" se potrivește cu eticheta
;;   "na"), atunci continuăm căutarea în subarborele ramurii
;; - dacă șablonul nu se potrivește cu eticheta (de exemplu
;;   șablonul "numai" nu se potrivește cu eticheta "na"), atunci
;;   el nu apare în text (altfel, eticheta ar fi fost "n", nu
;;   "na", pentru că eticheta este cel mai lung prefix comun al
;;   sufixelor din subarborele său)


; TODO 4
; Implementați funcția match-pattern-with-label care primește un
; arbore de sufixe și un șablon nevid și realizează un singur pas 
; din procesul prezentat mai sus - identifică ramura arborelui a
; cărei etichetă începe cu prima literă din șablon, apoi
; determină cât de bine se potrivește șablonul cu eticheta,
; întorcând ca rezultat:
; - true, dacă șablonul este conținut integral în etichetă
; - lista (etichetă, nou pattern, subarbore), dacă șablonul se
;   potrivește cu eticheta dar nu este conținut în ea
;   (ex: ("na", "na$", subarborele de sub eticheta "na")
;   pentru șablonul inițial "nana$" și eticheta "na")
; - lista (false, cel mai lung prefix comun între etichetă și
;   șablon), dacă șablonul nu s-a potrivit cu eticheta sau nu
;   s-a găsit din start o etichetă care începe cu litera dorită
;   (ex1: (false, "n") pentru șablonul "numai" și eticheta "na")
;   (ex2: (false, "") pentru etichetă negăsită)
; Obs: deși exemplele folosesc stringuri pentru claritate, vă
; reamintim că în realitate lucrăm cu liste de caractere.

(define (match-pattern-with-label st pattern)
  (if (get-ch-branch st (car pattern))
      (cond
        [(null? (car (cdr (cdr (longest-common-prefix (get-branch-label (get-ch-branch st (car pattern))) pattern))))) #t]
        [(null? (car (cdr (longest-common-prefix (get-branch-label (get-ch-branch st (car pattern))) pattern))))
         (list (car (longest-common-prefix (get-branch-label (get-ch-branch st (car pattern))) pattern))
               (car (cdr (cdr (longest-common-prefix (get-branch-label (get-ch-branch st (car pattern))) pattern))))
               (cdr (get-ch-branch st (car pattern))))]
        [else (list #f (car (cdr (cdr (longest-common-prefix (get-branch-label (get-ch-branch st (car pattern))) pattern)))))])
      `(#f ())))

;(trace match-pattern-with-label-helper)
  

; TODO 5
; Implementați funcția st-has-pattern? care primește un
; arbore de sufixe și un șablon și întoarce true dacă șablonul
; apare în arbore, respectiv false în caz contrar.
(define (st-has-pattern? st pattern)
  (if (equal? (match-pattern-with-label st pattern) #t)
      #t
      (if (equal? (car (match-pattern-with-label st pattern)) #f)
          #f
          (st-has-pattern? (car (cdr (cdr (match-pattern-with-label st pattern)))) (car (cdr (match-pattern-with-label st pattern)))))))